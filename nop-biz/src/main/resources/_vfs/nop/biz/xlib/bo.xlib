<?xml version="1.0" encoding="UTF-8" ?>

<lib x:schema="/nop/schema/xlib.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c" xmlns:bo-gen="bo-gen"
     xmlns:xpl="xpl" xmlns:thisLib="thisLib">
    <tags>
        <GetBizObject>
            <attr name="bizObjName" mandatory="true"/>
            <source>
                <c:script>
                    const bizObjManager = inject('nopBizObjectManager');
                    return bizObjManager.getBizObject(bizObjName)
                </c:script>
            </source>
        </GetBizObject>

        <Get>
            <attr name="id"/>
            <attr name="ignoreUnknown" optional="true"/>
            <attr name="selection" optional="true" type="io.nop.api.core.beans.FieldSelectionBean"/>
            <attr name="bizObjName" optional="true"/>
            <attr name="thisObj" implicit="true"/>
            <attr name="svcCtx" implicit="true"/>

            <transform>
                <bo-gen:TransformBizObjTag xpl:lib="bo-gen.xlib"/>
            </transform>

            <description>
                根据id获取实体，会自动验证数据权限
            </description>

            <source>
                <c:script>
                    const ret = thisObj.invoke('get',{id,ignoreUnknown},null,svcCtx);
                    if(ret and selection)
                    inject('nopOrmTemplate').batchLoadSelectionForEntity(ret, selection);
                    return ret;
                </c:script>
            </source>
        </Get>

        <BatchGet>
            <attr name="ids"/>
            <attr name="ignoreUnknown" optional="true"/>
            <attr name="selection" optional="true" type="io.nop.api.core.beans.FieldSelectionBean"/>
            <attr name="bizObjName" optional="true"/>
            <attr name="thisObj" implicit="true"/>
            <attr name="svcCtx" implicit="true"/>

            <description>
                根据id获取实体，会自动验证数据权限
            </description>

            <transform>
                <bo-gen:TransformBizObjTag xpl:lib="bo-gen.xlib"/>
            </transform>

            <source>
                <c:script>
                    const ret = thisObj.invoke('batchGet',{ids},null,svcCtx);
                    if(ret and selection)
                    inject('nopOrmTemplate').batchLoadSelection(ret, selection);
                    return ret;
                </c:script>
            </source>
        </BatchGet>


        <DoFindPage>
            <attr name="query" optional="true" type="io.nop.api.core.beans.query.QueryBean"/>
            <attr name="authObjName" optional="true" type="String"/>
            <attr name="selection" optional="true" type="io.nop.api.core.beans.FieldSelectionBean"/>
            <attr name="bizObjName" optional="true"/>
            <attr name="thisObj" implicit="true" type="io.nop.biz.api.IBizObject"/>
            <attr name="svcCtx" implicit="true" type="io.nop.core.context.IServiceContext"/>


            <slot name="filter" outputMode="node">
                <arg name="query"/>
                <arg name="svcCtx"/>

                <description>
                    过滤条件，一般符合filter-bean格式要求，元模型为filter.xdef
                </description>
            </slot>

            <slot name="orderBy" outputMode="node"/>

            <slot name="prepareQuery" outputMode="none">
                <arg name="query"/>
                <arg name="svcCtx"/>
            </slot>

            <transform>
                <bo-gen:TransformBizObjTag xpl:lib="bo-gen.xlib"/>
            </transform>

            <source>
                <thisLib:_DoFindByQuery query="${query}" authObjName="${authObjName}" action="doFindPage0"
                                        filter="${slot_filter}"
                                        orderBy="${slot_orderBy}" prepareQuery="${slot_prepareQuery}" xpl:return="ret"/>
                <c:script><![CDATA[
                    if(ret.items and selection)
                        inject('nopOrmTemplate').batchLoadSelection(ret.items, selection);
                    return ret;
                ]]></c:script>
            </source>
        </DoFindPage>

        <DoFindFirst x:prototype="DoFindPage">
            <source>
                <thisLib:_DoFindByQuery query="${query}" authObjName="${authObjName}" action="doFindFirst0"
                                        filter="${slot_filter}"
                                        orderBy="${slot_orderBy}" prepareQuery="${slot_prepareQuery}" xpl:return="ret"/>
                <c:script><![CDATA[
                    if(ret and selection)
                        inject('nopOrmTemplate').batchLoadSelectionForEntity(ret, selection);
                    return ret;
                ]]></c:script>
            </source>
        </DoFindFirst>

        <DoFindList x:prototype="DoFindPage">
            <source>
                <thisLib:_DoFindByQuery query="${query}" authObjName="${authObjName}" action="doFindList0"
                                        filter="${slot_filter}"
                                        orderBy="${slot_orderBy}" prepareQuery="${slot_prepareQuery}" xpl:return="ret"/>
                <c:script><![CDATA[
                    if(ret and selection)
                        inject('nopOrmTemplate').batchLoadSelection(ret, selection);
                    return ret;
                ]]></c:script>
            </source>
        </DoFindList>


        <_DoFindByQuery>
            <attr name="query"/>
            <attr name="authObjName"/>
            <attr name="filter"/>
            <attr name="orderBy"/>
            <attr name="prepareQuery"/>
            <attr name="action"/>
            <attr name="selection" implicit="true"/>
            <attr name="thisObj" implicit="true" type="io.nop.biz.api.IBizObject"/>
            <attr name="svcCtx" implicit="true"/>

            <source>
                <c:script><![CDATA[
                    import io.nop.api.core.beans.query.QueryBean;
                    query = query || new QueryBean();

                    const ret = thisObj.invoke(action,{query,authObjName,prepareQuery:(qry,ctx)=>{
                        if(filter){
                            query.addFilter(filter(query,svcCtx));
                        }

                        if(orderBy){
                            query.addOrderByNode(orderBy(svcCtx));
                        }

                        if(prepareQuery != null){
                            prepareQuery(query,svcCtx);
                        }
                    }},selection,svcCtx);
                    return ret;
                ]]></c:script>
            </source>
        </_DoFindByQuery>

        <DoSave>
            <attr name="data" type="Map"/>
            <attr name="inputSelection" optional="true" type="io.nop.api.core.beans.FieldSelectionBean"/>
            <attr name="bizObjName" optional="true"/>
            <attr name="thisObj" implicit="true" type="io.nop.biz.api.IBizObject"/>
            <attr name="svcCtx" implicit="true" type="io.nop.core.context.IServiceContext"/>

            <slot name="prepareSave" outputMode="none">
                <arg name="entityData"/>
                <arg name="svcCtx"/>
            </slot>

            <transform>
                <bo-gen:TransformBizObjTag xpl:lib="bo-gen.xlib"/>
            </transform>

            <source>
                <c:script>
                    thisObj.invoke('doSave',{data,inputSelection,prepareUpdate:slot_prepareSave}, null,svcCtx);
                </c:script>
            </source>
        </DoSave>

        <DoUpdate>
            <attr name="data" type="Map"/>
            <attr name="inputSelection" optional="true" type="io.nop.api.core.beans.FieldSelectionBean"/>
            <attr name="bizObjName" optional="true"/>
            <attr name="thisObj" implicit="true" type="io.nop.biz.api.IBizObject"/>
            <attr name="svcCtx" implicit="true" type="io.nop.core.context.IServiceContext"/>

            <slot name="prepareSave" outputMode="none">
                <arg name="entityData"/>
                <arg name="svcCtx"/>
            </slot>

            <transform>
                <bo-gen:TransformBizObjTag xpl:lib="bo-gen.xlib"/>
            </transform>

            <source>
                <c:script>
                    thisObj.invoke('doUpdate',{data,inputSelection,prepareUpdate:slot_prepareSave}, null,svcCtx);
                </c:script>
            </source>
        </DoUpdate>

        <DoDelete>
            <attr name="id" type="String"/>
            <attr name="bizObjName" optional="true"/>
            <attr name="thisObj" implicit="true" type="io.nop.biz.api.IBizObject"/>
            <attr name="svcCtx" implicit="true" type="io.nop.core.context.IServiceContext"/>

            <slot name="prepareDelete" outputMode="none">
                <arg name="entity"/>
                <arg name="svcCtx"/>
            </slot>

            <transform>
                <bo-gen:TransformBizObjTag xpl:lib="bo-gen.xlib"/>
            </transform>

            <source>
                <c:script>
                    thisObj.invoke('doDelete',{data,inputSelection,prepareDelete:slot_prepareDelete}, null,svcCtx);
                </c:script>
            </source>
        </DoDelete>

        <DoFindTreeEntityPage x:prototype="DoFindPage">
            <source>
                <thisLib:_DoFindByQuery query="${query}" authObjName="${authObjName}" action="doFindTreeEntityPage"
                                        filter="${slot_filter}"
                                        orderBy="${slot_orderBy}" prepareQuery="${slot_prepareQuery}" xpl:return="ret"/>
                <c:script>ret</c:script>
            </source>
        </DoFindTreeEntityPage>

        <DoFindTreeEntityList x:prototype="DoFindPage">
            <source>
                <thisLib:_DoFindByQuery query="${query}" authObjName="${authObjName}" action="doFindTreeEntityList"
                                        filter="${slot_filter}"
                                        orderBy="${slot_orderBy}" prepareQuery="${slot_prepareQuery}" xpl:return="ret"/>
                <c:script>ret</c:script>
            </source>
        </DoFindTreeEntityList>


        <_DoByQuery x:abstract="true">
            <attr name="query" type="io.nop.api.core.beans.query.QueryBean"/>
            <attr name="data" mandatory="true" x:abstract="true"/>
            <attr name="authObjName" optional="true" type="String"/>
            <attr name="bizObjName" optional="true"/>
            <attr name="thisObj" implicit="true" type="io.nop.biz.api.IBizObject"/>
            <attr name="svcCtx" implicit="true" type="io.nop.core.context.IServiceContext"/>

            <slot name="filter" outputMode="node">
                <arg name="query"/>
                <arg name="svcCtx"/>

                <description>
                    过滤条件，一般符合filter-bean格式要求，元模型为filter.xdef
                </description>
            </slot>

            <slot name="orderBy" outputMode="node"/>

            <slot name="prepareQuery" outputMode="none">
                <arg name="query"/>
                <arg name="svcCtx"/>
            </slot>

            <transform>
                <bo-gen:TransformBizObjTag xpl:lib="bo-gen.xlib"/>
            </transform>
        </_DoByQuery>

        <DoUpdateByQuery x:prototype="_DoByQuery">
            <attr name="data" mandatory="true"/>

            <slot name="prepareUpdate" outputMode="none">
                <arg name="entityData"/>
                <arg name="svcCtx"/>
            </slot>

            <source>
                <c:script><![CDATA[
                    import io.nop.api.core.beans.query.QueryBean;
                    query = query || new QueryBean();

                    const ret = thisObj.invoke('doUpdateByQuery',{query,authObjName,data, prepareQuery:(qry,ctx)=>{
                        if(filter){
                            query.addFilter(filter(query,svcCtx));
                        }

                        if(orderBy){
                            query.addOrderByNode(orderBy(svcCtx));
                        }

                        if(prepareQuery != null){
                            prepareQuery(query,svcCtx);
                        }
                    }, prepareUpdate:(entityData,ctx)=>{
                       if(prepareUpdate)
                          prepareUpdate(entityData,svcCtx);
                    }},null, svcCtx);
                    return ret;
                ]]></c:script>
            </source>
        </DoUpdateByQuery>

        <DoDeleteByQuery x:prototype="_DoByQuery">
            <attr name="refNamesToCheck" stdDomain="csv-set" optional="true"/>

            <slot name="prepareDelete" outputMode="none">
                <arg name="entity"/>
                <arg name="svcCtx"/>
            </slot>

            <source>
                <c:script><![CDATA[
                    import io.nop.api.core.beans.query.QueryBean;
                    query = query || new QueryBean();

                    const ret = thisObj.invoke('doDeleteByQuery',{query,authObjName,refNamesToCheck, prepareQuery:(qry,ctx)=>{
                        if(filter){
                            query.addFilter(filter(query,svcCtx));
                        }

                        if(orderBy){
                            query.addOrderByNode(orderBy(svcCtx));
                        }

                        if(prepareQuery != null){
                            prepareQuery(query,svcCtx);
                        }
                    }, prepareDelete: (entity,ctx)=>{
                       if(prepareDelete)
                          prepareDelete(entity,svcCtx);
                    }}, null, svcCtx);
                    return ret;
                ]]></c:script>
            </source>
        </DoDeleteByQuery>

        <DoFindListByMdxQuery>
            <slot name="query" outputMode="node" slotType="renderer"/>
            <attr name="rowType" optional="true"/>

            <source>
                <thisLib:_DoFindByMdxQuery queryBuilder="${slot_query}" method="findListByQuery"/>
            </source>
        </DoFindListByMdxQuery>

        <DoFindFirstByMdxQuery>
            <slot name="query" outputMode="node" slotType="renderer"/>
            <attr name="rowType" optional="true"/>

            <source>
                <thisLib:_DoFindByMdxQuery queryBuilder="${slot_query}" method="findFirstByQuery"/>
            </source>
        </DoFindFirstByMdxQuery>

        <_DoFindByMdxQuery>
            <attr name="method" type="String"/>
            <attr name="queryBuilder"/>
            <attr name="rowType" implicit="true"/>

            <source>
                <c:script><![CDATA[
                    import io.nop.core.model.query.QueryBeanHelper;

                    const queryNode = queryBuilder();
                    const query = QueryBeanHelper.buildQueryBeanFromTreeBean(queryNode);
                    const ormTemplate = inject('nopOrmTemplate');
                    const mapper = ormTemplate.getRowMapper(rowType,false);
                    if(method == 'findListByQuery')
                        return ormTemplate.findListByQuery(query,mapper);
                    return ormTemplate.findFirstByQuery(query, mapper);
                ]]></c:script>
            </source>
        </_DoFindByMdxQuery>

        <RequireEntity>
            <attr name="id" implicit="true"/>
            <attr name="action" type="String" optional="true"/>
            <attr name="thisObj" implicit="true" type="io.nop.biz.api.IBizObject"/>
            <attr name="svcCtx" implicit="true" type="io.nop.core.context.IServiceContext"/>

            <source>
                <c:script><![CDATA[
                    return thisObj.invoke("requireEntity",{id,action: action || 'get'},null,svcCtx);
                ]]></c:script>
            </source>
        </RequireEntity>

        <TriggerStateChange>
            <attr name="entity" optional="true"/>
            <attr name="id" type="String" optional="true" />
            <attr name="event" type="String" mandatory="true"/>
            <attr name="thisObj" implicit="true" type="io.nop.biz.api.IBizObject"/>
            <attr name="svcCtx" implicit="true" type="io.nop.core.context.IServiceContext"/>

            <source>
                <c:script><![CDATA[
                    if(!entity)
                      entity = thisObj.invoke("requireEntity",{id,action:event},null,svcCtx);
                    thisObj.stateMachine!.triggerStateChange(entity,event,svcCtx);
                    return entity;
                ]]></c:script>
            </source>
        </TriggerStateChange>
    </tags>
</lib>