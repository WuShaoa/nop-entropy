<lib x:schema="/nop/schema/xlib.xdef">
    <tags>
        <DefineLoop>

            <slot name="default">
                <arg name="builder" implicit="true"/>
            </slot>

            <source>
                <c:script>
                    import io.nop.core.model.loop.impl.NestedLoopBuilder;

                    let builder = new NestedLoopBuilder();
                </c:script>

                <c:unit xpl:slot="default" xpl:slotArgs="{builder}"/>

                <c:script>
                    // 导出codeGenLoop变量到scope中
                    assign("codeGenLoop", builder.build());
                </c:script>
            </source>
        </DefineLoop>

        <Render>
            <attr name="template"/>
            <attr name="targetDir"/>
            <attr name="inheritCodeGenLoop" optional="true" type="Boolean"/>
            <attr name="codeGenerator" implicit="true"/>
            <attr name="codeGenLoop" implicit="true"/>
            <source>
                <c:script><![CDATA[
                    const vars = {}
                    if(inheritCodeGenLoop)
                        vars.codeGenLoop = codeGenLoop;
                    codeGenerator.withTplDir(template).withTargetDir(targetDir).execute("",vars,$scope);
                ]]></c:script>
            </source>
        </Render>

        <RenderWithLoop>
            <attr name="template"/>
            <attr name="targetDir"/>
            <attr name="codeGenerator" implicit="true"/>
            <attr name="codeGenLoop" implicit="true"/>

            <source>
                <c:script>
                    codeGenerator.withTplDir(template).withTargetDir(targetDir).executeWithLoop("",codeGenLoop,$scope);
                </c:script>
            </source>
        </RenderWithLoop>

        <MergeXml outputMode="xml">
            <attr name="resource" type="io.nop.core.resource.IResource"/>

            <slot name="update" outputMode="node"/>
            <slot name="create" outputMode="xml"/>

            <source>
                <c:choose>
                    <when test="${resource.length() > 0}">
                        <!-- 文件已存在，执行合并操作 -->

                        <c:script>
                            import io.nop.core.lang.utils.XNodeMergeHelper;
                            import io.nop.core.resource.ResourceHelper;

                            let updateNode = eval_node(slot_update).child(0);
                            let node = ResourceHelper.readXml(resource);
                            node = XNodeMergeHelper.mergeIfAbsent(node,updateNode);
                            XNodeMergeHelper.normalizeMerged(node);
                            node.output($out);
                        </c:script>
                    </when>

                    <otherwise>
                        <c:unit xpl:slot="create"/>
                    </otherwise>
                </c:choose>
            </source>
        </MergeXml>

        <DslModelToXNode outputMode="none">
            <attr name="model"/>
            <attr name="defaultXdefPath" type="String"/>

            <source>
                <c:script>
                    import io.nop.xlang.xdsl.DslModelHelper;

                    let xdefPath = DslModelHelper.getXdefPath(model,defaultXdefPath);
                    DslModelHelper.dslModelToXNode(xdefPath,model);
                </c:script>
            </source>
        </DslModelToXNode>

        <DefineLoopForOrm>
            <attr name="codeGenModel" implicit="true"/>

            <slot name="default">
                <arg name="builder" implicit="true"/>
                <arg name="ormModel" implicit="true" />
                <arg name="appName" implicit="true" />
                <arg name="moduleId" implicit="true" />
                <arg name="pkgName" implicit="true" />
                <arg name="pkgPath" implicit="true" />
            </slot>

            <source>
                <thisLib:DefineLoop>
                    <c:script><![CDATA[
                        import io.nop.core.resource.ResourceHelper;

                        let ormModel = codeGenModel;
                        let appName = ormModel['ext:appName'] || ormModel['ext:moduleName'];
                        let pkgName = ormModel['ext:basePackageName'];
                        let entityPkgName = ormModel['ext:entityPackageName'];
                        if(!pkgName){
                            if(!entityPkgName)
                               entityPkgName = "app.dyn.entity";

                            if(entityPkgName.endsWith('.dao.entity')){
                                pkgName = entityPkgName.$removeTail('.dao.entity');
                            }else if(entityPkgName.endsWith('.entity')){
                                pkgName = entityPkgName.$removeTail('.entity');
                            }
                        }
                        let pkgPath = pkgName.replace('.','/');

                        ResourceHelper.checkValidModuleName(appName);

                        let moduleName = appName;
                        let moduleId = moduleName.replace('-','/')
                        builder.defineGlobalVar("ormModel",ormModel);
                        builder.defineGlobalVar("appName", appName);
                        builder.defineGlobalVar("moduleId",moduleId);
                        builder.defineGlobalVar("moduleName",moduleName);
                        builder.defineGlobalVar('mavenGroupId',ormModel['ext:mavenGroupId']);
                        builder.defineGlobalVar('mavenArtifactId', ormModel['ext:mavenArtifactId']);
                        builder.defineGlobalVar("moduleClassPrefix",moduleId.replace('/','_').$camelCase(true))
                        builder.defineGlobalVar('basePackageName', pkgName);
                        builder.defineGlobalVar('basePackagePath', pkgPath);
                        builder.defineGlobalVar('deltaDir', ormModel['ext:deltaDir']);
                        builder.defineGlobalVar('useCoreModule',ormModel['ext:useCoreModule'].$toBoolean());

                        builder.defineLoopVar("entityModel","ormModel", model => model.entityModels);
                        builder.defineLoopVar("toManyRelation","entityModel",entityModel=> entityModel.toOneRelations);
                        builder.defineLoopVar("toOneRelation", "entityModel", entityModel=> entityModel.toManyRelations);

                        builder.defineLoopVar("dialect","ormModel",model=> model["ext:dialect"].$toCsvSet());
                        builder.defineLoopVar("dict","ormModel", model=> model.dicts);
                    ]]></c:script>
                    <c:unit xpl:slot="default" xpl:slotArgs="{builder,ormModel,appName,moduleId,pkgName,pkgPath}" />
                </thisLib:DefineLoop>
            </source>
        </DefineLoopForOrm>

        <CollectApiMessageImports>
            <attr name="serviceModel"/>
            <source><![CDATA[
                let types = new Set();
                serviceModel.methods.forEach(method=>{
                   if(method.requestMessage != method.simpleRequestMessage && !method.voidRequest)
                      types.add(method.requestMessage);
                   if(!method.responseMessage.javaDefaultImportType && method.responseMessage.toString() != method.simpleResponseMessage)
                      types.add(method.responseMessage);
                });
                return types;
            ]]></source>
        </CollectApiMessageImports>
    </tags>
</lib>