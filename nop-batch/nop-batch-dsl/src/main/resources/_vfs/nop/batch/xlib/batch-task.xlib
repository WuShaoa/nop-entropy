<?xml version="1.0" encoding="UTF-8" ?>

<lib x:schema="/nop/schema/xlib.xdef"
     xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c">

    <tags>
        <Execute ignoreUnknownAttrs="true" macro="true">
            <!-- slotType=node表示保持XNode节点内容传入到source段中。如果不设置这个属性，则会编译后传入 -->
            <slot name="default" slotType="node"/>

            <description>
                利用宏标签机制将XNode按照BatchTask模型解析，并转化为对BatchTask的调用。
            </description>

            <source>
                <c:script><![CDATA[
                   const node = slot_default;
                   const batchTaskManager = inject('nopBatchTaskManager')
                   const batchTaskFactory = batchTaskManager.newBatchTaskFactoryFromModel(
                            node.getAttr('name')||'inline-task', node);
                    // 得到<c:script>对应的抽象语法树
                    let ast = xpl `
                         <c:ast>
                            <c:script>
                               const batchTaskManager = inject('nopBatchTaskManager');
                               const batchTaskContext = batchTaskManager.newBatchTaskContext(svcCtx,$scope);
                               return batchTaskFactory.newTask($beanProvider).executeAsync(batchTaskContext);
                            </c:script>
                         </c:ast>
                     `
                    // 将抽象语法树中的标识名称替换为编译期解析得到的模型对象。这样在运行期就不需要动态加载模型并解析
                    return ast.replaceIdentifier("batchTaskFactory",batchTaskFactory);
                ]]></c:script>

            </source>
        </Execute>
    </tags>
</lib>