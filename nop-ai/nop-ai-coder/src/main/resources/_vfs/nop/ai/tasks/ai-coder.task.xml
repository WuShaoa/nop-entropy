<task x:schema="/nop/schema/task/task.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:task="task"
      xmlns:ai="/nop/ai/xlib/ai.xlib" xmlns:ai-coder="/nop/ai/xlib/ai-coder.xlib" x:dump="true"
      xmlns:file-utils="/nop/task/xlib/file-utils.xlib"
      x:extends="/nop/task/lib/common.task.xml">

    <ai:chatOptions provider="ollama" model="qwen3:14b" contextLength="8192" maxTokens="8192"/>

    <task:namespace ai-coder:enabled="true" file-utils:enabled="true"/>

    <input name="requirementsPath" type="String" mandatory="true"/>
    <input name="appName" type="String" mandatory="true"/>
    <input name="basePackageName" type="String" mandatory="true"/>
    <input name="outputDir" type="String" mandatory="true"/>

    <steps>
        <xpl name="init">
            <input name="appName"/>
            <output name="appId">
                <source>
                    return appName.replace('-','/');
                </source>
            </output>
        </xpl>

        <custom name="loadRequirements" customType="ai-coder:LoadMarkdown">
            <input name="fileName" value="${requirementsPath}"/>
            <input name="tplPath" value="/nop/ai/schema/coder/requirements.tpl.md"/>

            <input name="loadDocumentExt" value="true"/>
            <input name="sectionExtTplPath" value="/nop/ai/schema/coder/module-requirements.tpl.md"/>

            <output name="RESULT" exportAs="requirementsDoc"/>
        </custom>

        <xpl name="splitRequirements">
            <input name="requirementsDoc"/>
            <output name="ormRequirements">
                <source>
                    return requirementsDoc.selectSectionByTplTag('ORM').toText();
                </source>
            </output>

            <output name="menuRequirements">
                <source>
                    return requirementsDoc.selectSectionByTplTag('MENU').toText();
                </source>
            </output>
        </xpl>

        <custom name="designOrm" customType="ai:TaskStep" ai:promptName="coder/orm-design" ai:useResponseCache="true">
            <description>根据需求文档的描述，设计ORM模型</description>

            <input name="requirements" value="${ormRequirements}"/>
            <output name="RESULT" exportAs="ormModel"/>
        </custom>

        <custom name="saveOrmXml" customType="file-utils:WriteText">
            <input name="outputDir"/>
            <input name="fileName" value="src/main/resources/${appId}/orm/_gen/ai-gen.orm.xml"/>
            <input name="text" value="${ormModel.ormModelXml}"/>
        </custom>

        <custom name="saveOrmExcel" customType="ai-coder:SaveDslModelAsExcel">
            <input name="outputDir"/>
            <input name="fileName" value="model/${appName}.orm.xlsx"/>
            <input name="dslModel" value="${ormModel.ormModel}"/>
            <input name="impModelPath" value="/nop/orm/imp/orm.imp.xml" />
        </custom>

        <custom name="designMenu" customType="ai:TaskStep" ai:promptName="coder/menu-design" ai:useResponseCache="true">
            <description>根据需求文档的描述，设计菜单和角色权限</description>

            <input name="requirements" value="${menuRequirements}"/>
            <input name="ormModel"/>
            <output name="RESULT" exportAs="menuNode"/>
        </custom>

        <custom name="saveMenuXml" customType="file-utils:WriteText">
            <input name="outputDir"/>
            <input name="fileName" value="src/main/resources/${appId}/orm/_gen/ai-gen.action-auth.xml"/>
            <input name="text" value="${menuNode.xml()}"/>
        </custom>
    </steps>
</task>