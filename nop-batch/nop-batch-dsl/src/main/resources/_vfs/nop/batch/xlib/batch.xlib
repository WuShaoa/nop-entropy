<?xml version="1.0" encoding="UTF-8" ?>

<lib x:schema="/nop/schema/xlib.xdef"
     xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c">

    <tags>
        <!--
        通过名为task的slot传入批处理模型配置，然后执行宏标签函数，在编译器将其解析构造出IBatchTaskBuilder对象，然后传递到运行期。
        然后在运行期通过IBatchTaskBuilder.buildTask函数创建出IBatchTask并执行。
        -->
        <Execute ignoreUnknownAttrs="true" macro="true">
           <!--runtime标识是运行期存在的变量。这个属性仅当标签是宏标签的时候起作用-->
           <attr name="flowId" runtime="true" optional="true"/>
           <attr name="flowStepId" runtime="true" optional="true"/>
           <attr name="partitionRange" runtime="true" optional="true" />
           <attr name="params" runtime="true" optional="true" />

            <!-- slotType=node表示保持XNode节点内容传入到source段中。如果不设置这个属性，则会编译后传入 -->
            <slot name="task" slotType="node"/>

            <description>
                利用宏标签机制将XNode按照BatchTask模型解析，并转化为对BatchTask的调用。
            </description>

            <source>
                <c:script><![CDATA[
                   const node = slot_task.cloneInstance();
                   node.setAttrIfAbsent('x:schema','/nop/schema/task/batch.xdef');
                   node.setAttr('xmlns:x','/nop/schema/xdsl.xdef');
                   node.tagName = 'batch';
                   node.makeChild('x:config').appendBodyXml(`<c:import from="/nop/batch/xlib/batch.xlib" />`);

                   const batchTaskManager = inject('nopBatchTaskManager')
                   const batchTaskBuilder = batchTaskManager.newBatchTaskBuilderFromModel(node,$beanProvider,$scope);
                    // 得到<c:script>对应的抽象语法树
                    let ast = xpl `
                         <c:ast>
                            <c:script>
                               const batchTaskManager = inject('nopBatchTaskManager');
                               const batchTaskContext = batchTaskManager.newBatchTaskContext(svcCtx,$scope);
                               const taskStepRt = get('taskStepRt');
                               batchTaskContext.setFlowId(taskStepRt?.taskInstanceId);
                               batchTaskContext.setFlowStepId(taskStepRt?.stepInstanceId);
                               batchTaskContext.setPartitionRange(partitionRange);
                               batchTaskContext.setParams(params);
                               return batchTaskBuilder.buildTask(batchTaskContext).executeAsync(batchTaskContext);
                            </c:script>
                         </c:ast>
                     `
                    // 将抽象语法树中的标识名称替换为编译期解析得到的模型对象。这样在运行期就不需要动态加载模型并解析
                    return ast.replaceIdentifier("batchTaskBuilder",batchTaskBuilder);
                ]]></c:script>

            </source>
        </Execute>

        <Consume>
            <attr name="item" mandatory="true"/>
            <attr name="consume" implicit="true" />
            <source>
                consume(item);
            </source>
        </Consume>
    </tags>
</lib>