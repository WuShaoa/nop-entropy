<prompt xdef:name="PromptModel" xdef:bean-package="io.nop.ai.core.model"
        x:schema="/nop/schema/xdef.xdef" xmlns:x="/nop/schema/xdsl.xdef"
        xmlns:xdef="/nop/schema/xdef.xdef"
        displayName="string">

    <description xdef:value="string"/>

    <defaultChatOptions xdef:ref="chat-options.xdef"/>

    <inputs xdef:body-type="list" xdef:key-attr="name">
        <!--
        声明模板中使用的变量信息。主要用于模板管理
        -->
        <input name="!var-name" displayName="string" xdef:name="PromptInputModel"
               optional="!boolean=false" mandatory="!boolean=false">
            <schema xdef:ref="../schema/schema.xdef"/>
            <description>string</description>

            <defaultExpr>xpl-fn:(message)=>any</defaultExpr>

            <parseFromMessage xdef:name="PromptInputParseModel" blockBegin="string" blockEnd="string">
                <source>xpl-fn:(message)=>any</source>
            </parseFromMessage>
        </input>
    </inputs>

    <outputs xdef:body-type="list" xdef:key-attr="name">
        <!-- 解析响应消息，得到结果变量保存到AiResultMessage上
          @skipWhenResponseInvalid 当AiChatResponse为invalid状态时，跳过此输出变量的解析
          @parseBeforeProcess 是否在processChatResponse调用之前解析
        -->
        <output name="!var-name" displayName="string" xdef:name="PromptOutputModel" type="generic-type"
                optional="!boolean=false" mandatory="!boolean=false"
                skipWhenResponseInvalid="!boolean=false" parseBeforeProcess="!boolean=false">
            <description>string</description>
            <schema xdef:ref="../schema/schema.xdef"/>

            <xdef>xml</xdef>
            <xdefPath>v-path</xdefPath>

            <parseFromResponse xdef:name="PromptOutputParseModel" contains="string"
                               beginBlockOptional="!boolean=false" blockBegin="string" blockEnd="string">
                <source>xpl-fn:(chatResponse)=>any</source>
            </parseFromResponse>
        </output>
    </outputs>

    <!--
    通过xpl模板语言生成prompt，可以利用xpl的扩展能力实现Prompt的结构化抽象
    -->
    <template>xpl-text</template>

    <checkAndRemoveLine>string</checkAndRemoveLine>

    <!--
    执行完AI模型调用后得到AiChatResponse对象，可以通过模板内置的后处理器对返回结果进行再加工。
    这样在切换不同的Prompt模板的时候可以自动切换使用不同的后处理器。
    比如Prompt中可以额外增加一些特殊的标记提示，用于简化结果解析，在processChatResponse中自动识别这些标记并做处理。
    -->
    <processChatResponse>xpl-fn:(chatResponse)=>void</processChatResponse>
</prompt>