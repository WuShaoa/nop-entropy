package io.nop.orm.eql.ast;


import io.nop.api.core.annotations.meta.PropMeta;
import io.nop.orm.eql.enums.SqlCompareRange;
import io.nop.orm.eql.enums.SqlDateTimeType;
import io.nop.orm.eql.enums.SqlIntervalUnit;
import io.nop.orm.eql.enums.SqlJoinType;
import io.nop.orm.eql.enums.SqlOperator;
import io.nop.orm.eql.enums.SqlUnionType;

import java.util.List;

class EqlAST {

    abstract class EqlASTNode {

    }

    abstract class SqlExpr {

    }

    abstract class SqlFunction extends SqlExpr {

    }

    abstract class SqlLiteral extends SqlExpr {

    }

    class SqlProgram {
        @PropMeta(mandatory = true, minItems = 1)
        List<SqlStatement> statements;
    }

    abstract class SqlStatement {
        List<SqlDecorator> decorators;
    }

    abstract class SqlDmlStatement extends SqlStatement {

    }

    abstract class SqlDdlStatement extends SqlStatement {

    }

//    class SqlIdentifier extends SqlExpr {
//        @PropMeta(mandatory = true)
//        String name;
//    }

    class SqlQualifiedName {
        @PropMeta(mandatory = true)
        String name;

        SqlQualifiedName next;
    }

    class SqlTableName {
        SqlQualifiedName owner;

        @PropMeta(mandatory = true)
        String name;
    }

    class SqlColumnName extends SqlExpr {
        SqlQualifiedName owner;
        @PropMeta(mandatory = true)
        String name;
    }

    class SqlInsert extends SqlDmlStatement {
        @PropMeta(mandatory = true)
        SqlTableName tableName;

        @PropMeta(mandatory = true)
        List<SqlColumnName> columns;

        SqlSelect select;
        SqlValues values;
    }

    class SqlValues {
        @PropMeta(mandatory = true, minItems = 1)
        List<SqlExpr> values;
    }

    class SqlUpdate extends SqlDmlStatement {
        @PropMeta(mandatory = true)
        SqlTableName tableName;

        SqlAlias alias;

        @PropMeta(mandatory = true, minItems = 1)
        List<SqlAssignment> assignments;

        SqlWhere where;
    }

    class SqlAlias {
        String alias;
    }

    class SqlAssignment {
        @PropMeta(mandatory = true)
        SqlColumnName columnName;

        @PropMeta(mandatory = true)
        SqlExpr expr;
    }

    class SqlDelete extends SqlDmlStatement {
        @PropMeta(mandatory = true)
        SqlTableName tableName;
        SqlAlias alias;

        SqlWhere where;
    }

    class SqlWhere {
        @PropMeta(mandatory = true)
        SqlExpr expr;
    }

    class SqlCteStatement {
        boolean recursive;

        @PropMeta(mandatory = true)
        String name;
        @PropMeta(mandatory = true)
        SqlSelect statement;
    }

    abstract class SqlSelect extends SqlDmlStatement {
    }

    class SqlSelectWithCte extends SqlDmlStatement {
        List<SqlCteStatement> withCtes;
        @PropMeta(mandatory = true)
        SqlSelect select;
    }

    class SqlQuerySelect extends SqlSelect {

        boolean distinct;
        boolean selectAll;

        List<SqlProjection> projections;
        SqlFrom from;

        SqlWhere where;
        SqlGroupBy groupBy;
        SqlHaving having;
        SqlOrderBy orderBy;
        SqlLimit limit;
        boolean forUpdate;
        boolean nowait;
    }

    class SqlParameterMarker extends SqlExpr {

    }

    class SqlHaving {
        @PropMeta(mandatory = true)
        SqlExpr expr;
    }

    class SqlDecorator {
        @PropMeta(mandatory = true)
        String name;

        @PropMeta(mandatory = true)
        List<SqlLiteral> args;
    }

    class SqlUnionSelect extends SqlSelect {
        @PropMeta(mandatory = true)
        SqlSelect left;

        @PropMeta(mandatory = true)
        SqlUnionType unionType;

        @PropMeta(mandatory = true)
        SqlSelect right;
    }

    abstract class SqlProjection {

    }

    class SqlExprProjection extends SqlProjection {
        List<SqlDecorator> decorators;
        @PropMeta(mandatory = true)
        SqlExpr expr;
        SqlAlias alias;
    }

    class SqlAllProjection extends SqlProjection {
        SqlQualifiedName owner;
    }

    class SqlOrderBy {
        @PropMeta(mandatory = true)
        List<SqlOrderByItem> items;
    }

    class SqlGroupBy {
        @PropMeta(mandatory = true)
        List<SqlGroupByItem> items;
    }

    class SqlGroupByItem {
        @PropMeta(mandatory = true)
        SqlExpr expr;
    }

    class SqlOrderByItem {
        @PropMeta(mandatory = true)
        SqlExpr expr;
        String collate;
        boolean asc;
        Boolean nullsFirst;
    }

    class SqlLimit {
        SqlExpr limit;
        SqlExpr offset;
    }

    class SqlFrom {
        List<SqlDecorator> decorators;
        @PropMeta(mandatory = true)
        List<SqlTableSource> tableSources;
    }

    abstract class SqlTableSource {
        List<SqlDecorator> decorators;
    }

    class SqlSingleTableSource extends SqlTableSource {
        @PropMeta(mandatory = true)
        SqlTableName tableName;
        SqlAlias alias;
    }

    class SqlJoinTableSource extends SqlTableSource {
        @PropMeta(mandatory = true)
        SqlTableSource left;

        @PropMeta(mandatory = true)
        SqlJoinType joinType;

        @PropMeta(mandatory = true)
        SqlTableSource right;
        SqlExpr condition;
    }

    class SqlSubqueryTableSource extends SqlTableSource {
        boolean lateral;
        @PropMeta(mandatory = true)
        SqlSelect query;

        SqlAlias alias;
    }

    class SqlNotExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr expr;
    }

    class SqlAndExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr left;

        @PropMeta(mandatory = true)
        SqlExpr right;
    }

    class SqlOrExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr left;

        @PropMeta(mandatory = true)
        SqlExpr right;
    }

//    class SqlAnyExpr extends SqlExpr {
//        @PropMeta(mandatory = true)
//        SqlSelect subquery;
//    }

//    class SqlFunctionCallExpr extends SqlExpr {
//        SqlExpr owner;
//        @PropMeta(mandatory = true)
//        String methodName;
//
//        @PropMeta(mandatory = true)
//        List<SqlExpr> parameters;
//    }

    class SqlStringLiteral extends SqlLiteral {
        @PropMeta(mandatory = true)
        String value;
    }

    class SqlNumberLiteral extends SqlLiteral {
        @PropMeta(mandatory = true)
        String value;
    }

    class SqlDateTimeLiteral extends SqlLiteral {
        @PropMeta(mandatory = true)
        SqlDateTimeType type;

        @PropMeta(mandatory = true)
        String value;
    }

    class SqlHexadecimalLiteral extends SqlLiteral {
        @PropMeta(mandatory = true)
        String value;
    }

    class SqlBitValueLiteral extends SqlLiteral {
        @PropMeta(mandatory = true)
        String value;
    }

    class SqlBooleanLiteral extends SqlLiteral {
        boolean value;
    }

    class SqlNullLiteral extends SqlLiteral {
    }

    class SqlBinaryExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr left;

        @PropMeta(mandatory = true)
        SqlOperator operator;

        @PropMeta(mandatory = true)
        SqlExpr right;
    }

    class SqlIsNullExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr expr;

        boolean not;
    }

    class SqlCompareWithQueryExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr expr;
        @PropMeta(mandatory = true)
        SqlOperator operator;

        SqlCompareRange compareRange;

        @PropMeta(mandatory = true)
        SqlSubQueryExpr query;
    }

    class SqlSubQueryExpr extends SqlExpr {
        SqlSelect select;
    }

    class SqlInQueryExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr expr;
        boolean not;

        @PropMeta(mandatory = true)
        SqlSubQueryExpr query;
    }

    class SqlInValuesExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr expr;
        boolean not;

        @PropMeta(mandatory = true)
        List<SqlExpr> values;
    }

    class SqlBetweenExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr test;
        boolean not;

        @PropMeta(mandatory = true)
        SqlExpr begin;

        @PropMeta(mandatory = true)
        SqlExpr end;
    }

    class SqlLikeExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr expr;
        boolean not;
        boolean ignoreCase;

        @PropMeta(mandatory = true)
        SqlExpr value;
        SqlExpr escape;
    }

    class SqlUnaryExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlOperator operator;

        @PropMeta(mandatory = true)
        SqlExpr expr;
    }

    class SqlAggregateFunction extends SqlFunction {
        boolean distinct;

        @PropMeta(mandatory = true)
        String name;
        boolean selectAll;

        @PropMeta(mandatory = true)
        List<SqlExpr> args;
    }

    class SqlRegularFunction extends SqlFunction {
        @PropMeta(mandatory = true)
        String name;

        List<SqlExpr> args;
    }

    class SqlMultiValueExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        List<SqlExpr> values;
    }

    class SqlExistsExpr extends SqlExpr {
        boolean not;
        @PropMeta(mandatory = true)
        SqlSubQueryExpr query;
    }

//    class SqlBraceExpr extends SqlExpr {
//        @PropMeta(mandatory = true)
//        SqlExpr expr;
//    }

    class SqlIntervalExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr expr;

        @PropMeta(mandatory = true)
        SqlIntervalUnit intervalUnit;
    }

    class SqlCaseExpr extends SqlExpr {
        SqlExpr test;

        List<SqlCaseWhenItem> caseWhens;
        SqlExpr elseExpr;
    }


    class SqlCaseWhenItem extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr when;
        SqlExpr then;
    }

    class SqlCastExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        SqlExpr expr;

        @PropMeta(mandatory = true)
        SqlTypeExpr dataType;
    }

    class SqlTypeExpr extends SqlExpr {
        @PropMeta(mandatory = true)
        String name;

        int precision;
        int scale;
        String characterSet;
        String collate;
    }

    abstract class SqlTransactionStatement extends SqlStatement {

    }

    class SqlCommit extends SqlTransactionStatement {

    }

    class SqlRollback extends SqlTransactionStatement {

    }
}