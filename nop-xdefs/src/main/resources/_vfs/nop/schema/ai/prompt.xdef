<prompt xdef:name="PromptModel" xdef:bean-package="io.nop.ai.core.model"
        x:schema="/nop/schema/xdef.xdef" xmlns:x="/nop/schema/xdsl.xdef"
        xmlns:xdef="/nop/schema/xdef.xdef"
        displayName="string">

    <description xdef:value="string"/>

    <defaultChatOptions xdef:ref="chat-options.xdef"/>

    <inputs xdef:body-type="list" xdef:key-attr="name">
        <!--
        声明模板中使用的变量信息。主要用于模板管理
        -->
        <input name="!var-name" displayName="string" xdef:name="PromptInputModel"
               optional="!boolean=false" mandatory="!boolean=false">
            <schema xdef:ref="../schema/schema.xdef"/>
            <description>string</description>

            <defaultExpr>xpl-fn:()=>any</defaultExpr>

            <parseFromMessage xdef:name="PromptInputParseModel" blockBegin="string" blockEnd="string">
                <parser>xpl-fn:(message)=>any</parser>
            </parseFromMessage>
        </input>
    </inputs>

    <outputs xdef:body-type="list" xdef:key-attr="name">
        <!-- 解析响应消息，得到结果变量保存到AiResultMessage上
          @skipWhenResponseInvalid 当AiChatResponse为invalid状态时，跳过此输出变量的解析
          @parseBeforeProcess 是否在processChatResponse调用之前解析
          @format 如果是xml，则尝试从content中解析得到XML节点。如果是json，则尝试解析得到json数据。解析中会自动忽略一些无关的输出信息。
        -->
        <output name="!var-name" displayName="string" xdef:name="PromptOutputModel" type="generic-type"
                optional="!boolean=false" mandatory="!boolean=false"
                format="enum:io.nop.ai.core.model.PromptOutputFormat"
                skipWhenResponseInvalid="!boolean=false" parseBeforeProcess="!boolean=false">
            <description>string</description>
            <schema xdef:ref="../schema/schema.xdef"/>

            <xdefPath>v-path</xdefPath>
            <markdownPath>v-path</markdownPath>

            <!--
            没有指定format的情况下才会使用parseFromResponse配置
            如果指定了source，则执行代码来解析变量。如果没有指定source，但是指定了blockBegin和blockEnd，则从响应消息中截取相关信息。
            如果以上配置都没有，但是配置了contains，则只要响应消息中包含此字符串，就设置为true。

            @beingBlockOptional 如果为true，则允许响应消息中没有blockBegin，此时认为blockBegin在消息的最前方
            @includeBlockBegin 如果为true，则将blockBegin包含在解析结果中
            -->
            <parseFromResponse xdef:name="PromptOutputParseModel" contains="string"
                               beginBlockOptional="!boolean=false" blockBegin="string" blockEnd="string"
                               includeBlockBegin="!boolean=false" includeBlockEnd="!boolean=false">
                <parser>xpl-fn:(chatResponse)=>any</parser>
            </parseFromResponse>

            <!-- 对解析得到的value进行后处理 -->
            <normalizer>xpl-fn:(value,chatResponse)=>any</normalizer>
        </output>
    </outputs>

    <!--
    通过xpl模板语言生成prompt，可以利用xpl的扩展能力实现Prompt的结构化抽象
    -->
    <template>xpl-text</template>

    <!--
    用于标记整个输出结束的标记，必须以这个字符串为结尾才是合法输出。最终结果会自动删除这个标记
    通过额外增加一些特殊的标记提示，可以简化结果解析并识别AI输出质量。如果不能严格按照格式要求输出，则往往质量不高。
    -->
    <endResponseMarker>string</endResponseMarker>

    <!--
    执行完AI模型调用后得到AiChatResponse对象，可以通过模板内置的后处理器对返回结果进行再加工。
    这样在切换不同的Prompt模板的时候可以自动切换使用不同的后处理器。
    -->
    <processChatResponse>xpl-fn:(chatResponse)=>void</processChatResponse>
</prompt>