<c:unit xpl:outputMode="text">
package io.nop.record.codec._gen;

import io.nop.record.codec.IFieldBinaryCodec;
import io.nop.record.codec.IFieldBinaryEncoder;
import io.nop.record.codec.IFieldCodecContext;
import io.nop.record.reader.IRecordBinaryReader;
import io.nop.record.writer.IRecordBinaryWriter;

import java.nio.charset.Charset;

public class FieldBinaryCodec_${wordType.name} implements IFieldBinaryCodec{
    public static final FieldBinaryCodec_${wordType.name} INSTANCE = new FieldBinaryCodec_${wordType.name}();

    public Object decode(IRecordBinaryReader input, int length, Charset charset, IFieldCodecContext context){
        return input.read${wordType.name.$capitalize()}();
    }

    public void encode(IRecordBinaryWriter output, Object value, int length, Charset charset,
        IFieldCodecContext context, IFieldBinaryEncoder bodyEncoder){
        if(value == null){
            output.write${wordType.name.$capitalize()}(${wordType.obj.defaultValueInitializer});
        }else{
            output.write${wordType.name.$capitalize()}((${wordType.obj.valueTypeName})value);
        }
    }
}
</c:unit>