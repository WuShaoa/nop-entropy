<?xml version="1.0" encoding="UTF-8" ?>

<lib x:schema="/nop/schema/xlib.xdef"
     xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c" xmlns:thisLib="thisLib">

    <tags>
        <CreateTables outputMode="text">
            <attr name="tables" type="Collection&lt;? extends io.nop.orm.model.IEntityModel>"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>
            <attr name="allNullable" type="boolean" optional="true"/>
            <attr name="includeComments" type="boolean" optional="true"/>
            <source>
                <c:for var="table" items="${tables}">
                    <c:if test="${!table.tableView and !table.containsTag('not-gen')}">
                        <thisLib:CreateTable table="${table}" dialect="${dialect}" allNullable="${allNullable}"/>
                        <c:unit>;&#10;&#10;</c:unit>
                    </c:if>
                </c:for>

                <c:if test="${includeComments}">
                    <c:for var="table" items="${tables}">
                        <c:if test="${!table.tableView and !table.containsTag('not-gen')}">
                            <thisLib:AddComment table="${table}" dialect="${dialect}"/>
                        </c:if>
                    </c:for>
                </c:if>
            </source>
        </CreateTables>

        <DropTables outputMode="text">
            <attr name="tables" type="Collection&lt;? extends io.nop.orm.model.IEntityModel>"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>
            <attr name="ifExists" type="Boolean" optional="true"/>
            <source>
                <c:for var="table" items="${tables}">
                    <c:script>if(table.tableView or table.containsTag('not-gen')) continue;</c:script>
                    <thisLib:DropTable table="${table}" dialect="${dialect}" ifExists="${ifExists}"/>
                    <c:unit>;&#10;</c:unit>
                </c:for>
            </source>
        </DropTables>

        <CreateTable outputMode="text">
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>
            <attr name="allNullable" type="boolean" optional="true">
                <description>
                    是否所有字段都允许为空。单元测试时自动建表语句可以选择允许所有字段为空，这样便于兼容不同版本的测试数据。
                </description>
            </attr>

            <source>
                <c:unit><![CDATA[CREATE TABLE ${dialect.escapeSQLName(table.tableName)}(
 ]]></c:unit>
                <c:for var="col" items="${table.columns}">
                    <c:unit><![CDATA[ ${     dialect.escapeSQLName(col.code)} ]]></c:unit>
                    <thisLib:ColSqlType/>
                    <thisLib:DefaultValue/>
                    <thisLib:ColNullDef/>  <!-- oracle要求 default 0 not null这种顺序，缺省值要放到not null的前面-->
                    <thisLib:ColCommentDef/>
                    <c:unit><![CDATA[,
 ]]></c:unit>
                </c:for>
                <thisLib:TableUniqueConstraints/>
                <c:script>
                  const useTenantPk = table.useTenant and table.getColumnByCode('NOP_TENANT_ID',true) != null and !table.globalUniqueId
                  const tenantPk = useTenantPk ? 'NOP_TENANT_ID,' : ''
                </c:script>
                <c:unit><![CDATA[ constraint PK_${table.tableName} primary key (${tenantPk}${
                table.compositePk ? table.idProp.columns.map(col=>dialect.escapeSQLName(col.code)).join(',') : dialect.escapeSQLName(table.idProp.code)})
]]></c:unit>
                <c:unit>)</c:unit>
            </source>
        </CreateTable>

        <TableUniqueConstraints outputMode="text">
            <attr name="table" type="io.nop.orm.model.IEntityModel" implicit="true"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect" implicit="true"/>
            <source>
                <c:for var="uniqueKey" items="${table.uniqueKeys}">
                    <c:if test="${uniqueKey.constraint}">
                        <c:script>
                            let columns = uniqueKey.getColumnModelsWithTenant(table).map(col => dialect.escapeSQLName(col.code))
                        </c:script>
                        <c:unit><![CDATA[ constraint ${uniqueKey.constraint} unique (${
                        columns.join(',')})]]></c:unit>

                        <thisLib:UniqueKeyComment uniqueKey="${uniqueKey}" xpl:return="uniqueComment" />
                        <c:if test="${uniqueComment}"><![CDATA[    COMMENT ${dialect.getStringLiteral(uniqueComment)}]]></c:if>
                        <c:unit><![CDATA[,
 ]]></c:unit>
                    </c:if>
                </c:for>
            </source>
        </TableUniqueConstraints>

        <DropTable outputMode="text">
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>
            <attr name="ifExists" type="Boolean" optional="true"/>
            <source>
                <c:unit>${dialect.getDropTableSql(table.tableName, ifExists)}</c:unit>
            </source>
        </DropTable>

        <ColSqlType outputMode="text">
            <attr name="col" implicit="true"/>
            <attr name="dialect" implicit="true"/>
            <source>
                <c:unit>${dialect.stdToNativeSqlType(col.stdSqlType,col.precision,col.scale)}</c:unit>
            </source>
        </ColSqlType>

        <ColNullDef outputMode="text">
            <attr name="col" implicit="true"/>
            <attr name="dialect" implicit="true"/>
            <attr name="allNullable" optional="true" implicit="true"/>
            <source>
                <c:unit><![CDATA[ ${col.mandatory and !allNullable ? 'NOT NULL' : ''} ]]></c:unit>
            </source>
        </ColNullDef>

        <ColCommentDef outputMode="text">
            <attr name="col" implicit="true"/>
            <attr name="dialect" implicit="true"/>
            <source>

            </source>
        </ColCommentDef>

        <!-- 输出修改字段所采用的 SQL 语法：有用 modify column，也有用 alter column -->
        <ColModifyClause outputMode="text">
            <attr name="col" implicit="true"/>
            <attr name="dialect" implicit="true"/>
            <source>
                <c:unit><![CDATA[ modify column ]]></c:unit>
            </source>
        </ColModifyClause>

        <DefaultValue outputMode="text">
            <attr name="col" implicit="true"/>
            <attr name="dialect" implicit="true"/>
            <attr name="allNullable" implicit="true" />
            <source>
                <c:if test="${col.defaultValue != null}">
                    <c:script><![CDATA[
                        import io.nop.commons.type.StdSqlType;

                        // 无法识别字符串类型的默认值与函数名相同的情况，故而，只能要求在定义时不要设置与函数名相同的默认值
                        let isFunction = col.defaultValue instanceof String and dialect.getFunction(col.defaultValue) != null;
                    ]]></c:script>
                    <c:choose>
                        <when test="${isFunction}">
                            <c:unit><![CDATA[ default ${col.defaultValue} ]]></c:unit>
                        </when>
                        <otherwise>
                            <c:unit><![CDATA[ default ${dialect.getValueLiteral(col.normalizedDefaultValue)} ]]></c:unit>
                        </otherwise>
                    </c:choose>
                </c:if>
            </source>
        </DefaultValue>

        <AddComment outputMode="text">
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <thisLib:TableComment table="${table}" xpl:return="tableComment"/>
                <c:if test="${tableComment}"><![CDATA[
      COMMENT ON TABLE ${dialect.escapeSQLName(table.tableName)} IS ${dialect.getStringLiteral(tableComment)};
                ]]></c:if>

                <c:for var="col" items="${table.columns}">
                    <thisLib:ColumnComment col="${col}" xpl:return="colComment"/>
                    <c:if test="${colComment}"><![CDATA[
      COMMENT ON COLUMN ${dialect.escapeSQLName(table.tableName)}.${dialect.escapeSQLName(col.code)} IS ${dialect.getStringLiteral(colComment)};
                    ]]></c:if>
                </c:for>
            </source>
        </AddComment>


        <TableComment outputMode="none">
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <source>
                <c:script>table.displayName || table.comment</c:script>
            </source>
        </TableComment>

        <ColumnComment outputMode="none">
            <attr name="col" type="io.nop.orm.model.IColumnModel"/>
            <source>
                <c:script>col.displayName || col.comment</c:script>
            </source>
        </ColumnComment>

        <UniqueKeyComment outputMode="none">
            <attr name="uniqueKey" type="io.nop.orm.model.OrmUniqueKeyModel"/>
            <source>
                <c:script>uniqueKey.comment || null</c:script>
            </source>
        </UniqueKeyComment>


        <AddTenantIdForTables outputMode="text">
            <attr name="tables" type="Collection&lt;? extends io.nop.orm.model.IEntityModel>"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
               <c:script>
                  tables = tables.filter(table=> !table.tableView and !table.containsTag('not-gen'))
               </c:script>

                <c:for var="table" items="${tables}">
                    <c:if test="${!table.tenantProp and xpl('thisLib:IsAllowTenant',table)}">
                        <thisLib:AddTenantIdForTable table="${table}" dialect="${dialect}"/>
                        <c:unit>;&#10;&#10;</c:unit>
                    </c:if>
                </c:for>

                <c:for var="table" items="${tables}">
                    <c:if test="${!table.tenantProp and xpl('thisLib:IsAllowTenant',table)}">
                        <thisLib:AddTenantIdToPrimaryKey table="${table}" dialect="${dialect}"/>
                        <c:unit>;&#10;&#10;</c:unit>
                    </c:if>
                </c:for>

                <c:for var="table" items="${tables}">
                    <c:if test="${!table.tenantProp and xpl('thisLib:IsAllowTenant',table)}">
                        <c:for var="uniqueKey" items="${table.uniqueKeys}">
                            <thisLib:AddTenantIdToUniqueKey uniqueKey="${uniqueKey}" table="${table}" dialect="${dialect}"
                                xpl:if="uniqueKey.constraint and !uniqueKey.containsTag('no-tenant')"/>
                        </c:for>
                    </c:if>
                </c:for>
            </source>
        </AddTenantIdForTables>

        <AddTenantIdForTable outputMode="text">
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <attr name="addToPk" type="String" optional="true" />
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <c:unit>alter table ${dialect.escapeSQLName(table.tableName)} add NOP_TENANT_ID ${dialect.stdToNativeSqlType('VARCHAR', 32, 0)} DEFAULT '0' NOT NULL</c:unit>

                <c:if test="${addToPk}">
                    <c:unit>;&#10;</c:unit>
                    <thisLib:AddTenantIdToPrimaryKey table="${table}" dialect="${dialect}"/>
                </c:if>
            </source>
        </AddTenantIdForTable>

        <AddTenantIdToPrimaryKey outputMode="text">
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <c:unit>alter table ${dialect.escapeSQLName(table.tableName)} drop constraint PK_${table.tableName}</c:unit>
                <c:unit>;&#10;</c:unit>
                <c:unit>alter table ${dialect.escapeSQLName(table.tableName)} add constraint PK_${table.tableName} primary key (NOP_TENANT_ID, ${
                table.compositePk ? table.idProp.columns.map(col=> dialect.escapeSQLName(col.code)).join(',') : dialect.escapeSQLName(table.idProp.code)})</c:unit>
            </source>
        </AddTenantIdToPrimaryKey>

        <AddTenantIdToUniqueKey outputMode="text">
            <attr name="uniqueKey" type="io.nop.orm.model.OrmUniqueKeyModel" />
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <c:script>
                    let columns = uniqueKey.columnModels.map(col => dialect.escapeSQLName(col.code))
                </c:script>

                <c:unit>alter table ${dialect.escapeSQLName(table.tableName)} drop constraint ${uniqueKey.constraint}</c:unit>
                <c:unit>;&#10;</c:unit>
                <thisLib:UniqueKeyComment uniqueKey="${uniqueKey}" xpl:return="uniqueComment"/>
                <c:unit>alter table ${dialect.escapeSQLName(table.tableName)} add constraint ${uniqueKey.constraint}
                     unique (NOP_TENANT_ID,${columns.join(',')})${uniqueComment ? $String.format(' %s %s','COMMENT',dialect.getStringLiteral(uniqueComment)) : ''};&#10;
                </c:unit>
            </source>
        </AddTenantIdToUniqueKey>

        <IsAllowTenant>
            <attr name="table" />

            <source>
                <c:script><![CDATA[
                    return !table.containsTag('no-tenant')
             ]]></c:script>
            </source>
        </IsAllowTenant>

        <AddColumn outputMode="text">
            <attr name="col" type="io.nop.orm.model.IColumnModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <!-- oracle 不允许add column，只支持add-->
                <c:unit>alter table ${dialect.escapeSQLName(col.ownerEntityModel.tableName)} add ${dialect.escapeSQLName(col.code)} </c:unit>
                <thisLib:ColSqlType/>
                <thisLib:DefaultValue allNullable="${false}"/>
                <thisLib:ColNullDef allNullable="${false}"/>
                <thisLib:ColCommentDef/>
            </source>
        </AddColumn>

        <DropColumn outputMode="text">
            <attr name="col" type="io.nop.orm.model.IColumnModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <c:unit>alter table ${dialect.escapeSQLName(col.ownerEntityModel.tableName)} drop column ${dialect.escapeSQLName(col.code)}</c:unit>
            </source>
        </DropColumn>

        <ModifyColumn outputMode="text">
            <attr name="col" type="io.nop.orm.model.IColumnModel"/>
            <attr name="oldCol" type="io.nop.orm.model.IColumnModel" />
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <c:unit><![CDATA[alter table ${dialect.escapeSQLName(col.ownerEntityModel.tableName)} ]]></c:unit>
                <thisLib:ColModifyClause/>
                <c:unit><![CDATA[ ${dialect.escapeSQLName(col.code)} ]]></c:unit>
                <thisLib:ColSqlType/>
                <thisLib:ColNullDef allNullable="${false}"/>
                <thisLib:DefaultValue allNullable="${false}"/>
                <thisLib:ColCommentDef/>
            </source>
        </ModifyColumn>

        <RenameColumn>
            <attr name="tableName" type="String" />
            <attr name="colName" type="String" />
            <attr name="newName" type="String" />
            <attr name="dialect" type="io.nop.dao.dialect.IDialect" />

            <source>
                <c:unit>alter table ${dialect.escapeSQLName(tableName)} rename column ${dialect.escapeSQLName(colName)} to ${dialect.escapeSQLName(newName)} </c:unit>
            </source>
        </RenameColumn>

        <AddUniqueKey outputMode="text">
            <attr name="uniqueKey" type="io.nop.orm.model.OrmUniqueKeyModel"/>
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <c:script>
                    let columns = uniqueKey.getColumnModelsWithTenant(table).map(col => dialect.escapeSQLName(col.code));
                </c:script>
                <c:unit><![CDATA[alter table ${dialect.escapeSQLName(table.tableName)} ]]></c:unit>
                <c:unit><![CDATA[  add constraint ${uniqueKey.constraint} ]]></c:unit>
                <c:unit><![CDATA[    unique (${columns.join(',')}) ]]></c:unit>
            </source>
        </AddUniqueKey>

        <DropUniqueKey outputMode="text">
            <attr name="uniqueKey" type="io.nop.orm.model.OrmUniqueKeyModel"/>
            <attr name="table" type="io.nop.orm.model.IEntityModel"/>
            <attr name="dialect" type="io.nop.dao.dialect.IDialect"/>

            <source>
                <c:unit><![CDATA[alter table ${dialect.escapeSQLName(table.tableName)} ]]></c:unit>
                <c:unit><![CDATA[  drop constraint ${uniqueKey.constraint} ]]></c:unit>
            </source>
        </DropUniqueKey>
    </tags>
</lib>
