<task x:schema="/nop/schema/task/task.xdef" xmlns:x="/nop/schema/xdsl.xdef"
      x:extends="/nop/task/lib/common.task.xml,/nop/task/lib/batch-common.task.xml"
      x:dump="true" defaultUseParentScope="true" xmlns:c="c">

    <input name="bizDate" type="LocalDate"/>

    <steps>
        <custom name="importIntoDb" customType="batch:Execute"
                xmlns:batch="/nop/batch/xlib/batch.xlib">
            <batch:task taskName="demo.loadData" batchSize="100" saveState="true" concurrency="10">

                <taskKeyExpr>bizDate</taskKeyExpr>

                <loader>
                    <file-reader filePath="dev:/input/txn-${bizDate}.dat" fileModelPath="txn.record-file.xlsx"/>
                </loader>

                <consumer name="all">
                    <!-- 从文件读取数据之后插入到数据库中，插入时判断是否已经存在，如果存在则会忽略这条记录-->
                    <orm-writer entityName="DemoIncomingTxn" allowInsert="true" allowUpdate="false">
                        <keyFields>cardNumber,txnAmount,txnTime</keyFields>
                    </orm-writer>
                </consumer>

            </batch:task>
        </custom>

        <custom name="processDataInDb" customType="batch:Execute" xmlns:batch="/nop/batch/xlib/batch.xlib">
            <batch:task taskName="demo.processData" batchSize="100" saveState="true" concurrency="4">
                <taskKeyExpr>bizDate</taskKeyExpr>

                <loader>
                    <orm-reader entityName="DemoIncomingTxn">

                    </orm-reader>

                    <dispatcher loadBatchSize="100" partitionIndexField="_t.partitionIndex">
                    </dispatcher>

                    <afterLoad>
                        <c:script><![CDATA[
                            if(items?.size() > 0){
                                const daoProvider = inject('nopDaoProvider');
                                const txnDao = daoProvider.dao('DemoIncomingTxn');
                                const cardDao = daoProvider.dao('DemoCard');

                                const cardNumbers = _.pluck(items, 'cardNumber');
                                // 批量加载实体
                                const map = cardDao.batchGetEntityMapByProp('cardNumber', cardNumbers);

                                const cards = [];
                                for(let item of items) {
                                    const card = map.get(item.cardNumber);
                                    if(card == null)
                                       continue;

                                    cards.push(card);

                                    // 实体内置了_t属性用于保存扩展属性
                                    item.make_t();

                                    item._t.cardId = card.id;
                                    item._t.accountId = card.accountId;
                                    item._t.partitionIndex = card.partitionIndex;
                                }
                            }
                            ]]></c:script>
                    </afterLoad>
                </loader>

                <processor name="process">
                    <source>
                        <c:script><![CDATA[
                            // 根据incomingTxn构建DemoTransaction所需要的数据
                            const data = {
                                accountId: item._t?.accountId || 'U'+$String.randomString(19),
                                cardId: item._t?.cardId || 'V'+$String.randomString(19),
                                cardNumber: item.cardNumber,
                                txnType: item.txnType,
                                txnAmount: item.txnAmount,
                                txnTime: item.txnTime,
                                partitionIndex: item._t?.partitionIndex || 0,
                            };

                            // txnId会传入deleteInput这个consumer中进行处理
                            consume(item.txnId);
                            consume(data);
                        ]]></c:script>
                    </source>
                </processor>

                <consumer name="deleteInput">
                    <filter>
                        return item instanceof String;
                    </filter>
                    <source>
                        <c:script><![CDATA[
                            const daoProvider = inject('nopDaoProvider');
                            daoProvider.dao('DemoIncomingTxn').deleteAllByIds(items);
                        ]]></c:script>
                    </source>
                </consumer>

                <consumer name="saveToDb">
                    <filter>
                        return !(item instanceof String);
                    </filter>

                    <orm-writer entityName="DemoTransaction">
                    </orm-writer>
                </consumer>
            </batch:task>
        </custom>
    </steps>
</task>