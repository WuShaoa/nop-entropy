<?xml version="1.0" encoding="UTF-8" ?>

<lib x:schema="/nop/schema/xlib.xdef"
     xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c" xmlns:thisLib="thisLib" xmlns:xdsl="xdsl" xmlns:xpl="xpl">

    <tags>
        <!--
        为BizObject生成服务接口代理对象
        -->
        <!--        <BizService outputMode="xml">-->
        <!--            <attr name="id" optional="true"/>-->
        <!--            <attr name="class" type="String" varName="className"/>-->
        <!--            <attr name="bizObjName" type="String"/>-->

        <!--            <source>-->
        <!--                <bean id="${id || className}" class="io.nop.graphql.core.rpc.GraphQLRpcProxyFactoryBean"-->
        <!--                      ioc:type="${className}">-->
        <!--                    <property name="bizObjName" value="${bizObjName}"/>-->
        <!--                </bean>-->
        <!--            </source>-->
        <!--        </BizService>-->

        <DefaultBizGenExtends outputMode="node">
            <attr name="_dsl_root" implicit="true"/>
            <attr name="forEntity" type="Boolean"/>
            <attr name="entityName" type="String" optional="false"/>

            <source>
                <thisLib:GenAbstractCrudMethods entityName="${entityName}" xpl:if="forEntity"/>
            </source>
        </DefaultBizGenExtends>

        <DefaultBizPostExtends outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <thisLib:TaskFlowSupport xpl:if="#{hasClass('io.nop.task.utils.TaskGenHelper')}"/>
                <thisLib:StateMachineSupport/>
            </source>
        </DefaultBizPostExtends>

        <TaskFlowSupport outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <c:script>
                    const taskActions = _dsl_root.childByTag('actions').findChildren(node=>node.attrText('task:name'));
                </c:script>
                <biz xpl:if="!taskActions.empty">
                    <c:script>
                        import io.nop.task.utils.TaskGenHelper;
                        const taskFlowManager = inject('nopTaskFlowManager');
                    </c:script>
                    <actions>
                        <c:for var="taskAction" items="${taskActions}">
                            <c:script>
                                const taskName = taskAction.attrText('task:name');
                                const taskVersion = taskAction.attrInt('task:version',0);
                                const taskFlowModel = taskFlowManager.getTaskFlowModel(taskName, taskVersion);
                            </c:script>
                            <c:out escape="none"
                                   value="${TaskGenHelper.buildBizActionFromTaskModel(taskAction, taskFlowModel)}"/>
                        </c:for>
                    </actions>
                </biz>
            </source>
        </TaskFlowSupport>

        <StateMachineSupport outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <c:script>
                    const actionsNode = _dsl_root.childByTag('actions');
                    const stmActions =
                    actionsNode.findChildren(node=>node.attrBoolean('bo:triggerStateChange'));
                </c:script>
                <biz xpl:if="!stmActions.empty">
                    <actions>
                        <c:for var="stmAction" items="${stmActions}">
                            <mutation name="${stmAction.getAttr('name')}" >
                                <arg name="id" type="String" mandatory="true"/>
                                <arg name="selection" type="io.nop.api.core.beans.FieldSelectionBean"
                                     kind="FieldSelection"/>
                                <arg name="svcCtx" type="io.nop.core.context.IServiceContext" kind="ServiceContext"/>

                                <source xpl:if="!stmAction.childByTag('source')?.hasBody()">
                                    <bo:TriggerStateChange id="${'$'}{id}" event="${stmAction.getAttr('name')}"
                                                           xpl:lib="/nop/biz/xlib/bo.xlib" xpl:ignoreTag="true"/>
                                </source>
                            </mutation>
                        </c:for>
                    </actions>
                </biz>
            </source>
        </StateMachineSupport>

        <GenAbstractCrudMethods outputMode="node">
            <attr name="entityName"/>
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <biz>
                    <xdsl:config xpl:ignoreTag="true">
                        <c:import id="bo.xlib" from="/nop/biz/xlib/bo.xlib"/>
                    </xdsl:config>

                    <actions>
                        <query name="findPageBase" xdsl:abstract="true">
                            <arg name="query" type="io.nop.api.core.beans.query.QueryBean"/>

                            <arg name="selection" type="io.nop.api.core.beans.FieldSelectionBean"
                                 kind="FieldSelection"/>

                            <arg name="svcCtx" type="io.nop.core.context.IServiceContext" kind="ServiceContext"/>

                            <return type="PageBean&lt;${entityName}>">
                                <schema bizObjName="${entityName.$simpleClassName()}"/>
                            </return>
                        </query>

                        <query name="findPage" xdsl:prototype="findPageBase" xdsl:abstract="true">
                        </query>

                        <query name="findList" xdsl:prototype="findPageBase" xdsl:abstract="true">
                            <return type="List&lt;${entityName}>"/>
                        </query>

                        <query name="findFirst" xdsl:prototype="findPageBase" xdsl:abstract="true">
                            <return type="${entityName}"/>
                        </query>

                        <query name="get" xdsl:abstract="true">
                            <arg name="id" type="String"/>

                            <arg name="ignoreUnknown" type="Boolean"/>

                            <arg name="selection" type="io.nop.api.core.beans.FieldSelectionBean"
                                 kind="FieldSelection"/>

                            <arg name="svcCtx" type="io.nop.core.context.IServiceContext" kind="ServiceContext"/>

                            <return type="${entityName}">
                                <schema bizObjName="${entityName.$simpleClassName()}"/>
                            </return>
                        </query>

                        <query name="batchGet" xdsl:abstract="true">
                            <arg name="ids" type="List&lt;String>"/>

                            <arg name="selection" type="io.nop.api.core.beans.FieldSelectionBean"
                                 kind="FieldSelection"/>

                            <arg name="svcCtx" type="io.nop.core.context.IServiceContext" kind="ServiceContext"/>

                            <return type="List&lt;${entityName}>">
                                <schema bizObjName="${entityName.$simpleClassName()}"/>
                            </return>
                        </query>

                        <mutation name="delete" xdsl:abstract="true">
                            <arg name="id" type="String"/>
                            <arg name="svcCtx" type="io.nop.core.context.IServiceContext" kind="ServiceContext"/>

                            <return type="boolean"/>
                        </mutation>

                        <mutation name="save" xdsl:abstract="true">
                            <arg name="data" type="Map&lt;String,Object>"/>

                            <arg name="selection" type="io.nop.api.core.beans.FieldSelectionBean"
                                 kind="FieldSelection"/>

                            <arg name="svcCtx" type="io.nop.core.context.IServiceContext" kind="ServiceContext"/>

                            <return type="${entityName}">
                                <schema bizObjName="${entityName.$simpleClassName()}"/>
                            </return>
                        </mutation>

                        <mutation name="update" xdsl:abstract="true">
                            <arg name="data" type="Map&lt;String,Object>"/>

                            <arg name="selection" type="io.nop.api.core.beans.FieldSelectionBean"
                                 kind="FieldSelection"/>

                            <arg name="svcCtx" type="io.nop.core.context.IServiceContext" kind="ServiceContext"/>

                            <return type="${entityName}">
                                <schema bizObjName="${entityName.$simpleClassName()}"/>
                            </return>
                        </mutation>
                    </actions>
                </biz>
            </source>
        </GenAbstractCrudMethods>
    </tags>
</lib>