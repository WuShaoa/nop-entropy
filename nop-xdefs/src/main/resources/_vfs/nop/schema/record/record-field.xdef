<?xml version="1.0" encoding="UTF-8" ?>

<!--
定长记录的定义

@name 对应解析得到的属性名
@tagsCodec 类似ISO8583协议，支持先输出一个bitmap标记哪些字段需要写出，然后根据tagIndex过滤只写出部分字段
@repeatKind 如果是列表结构或者Map结构，则这里用来确定如何判断所有条目已经解析完毕
@asMap 表示解析得到Map结构。要求fields中必须包含且只包含两个字段key和value，repeatKind不允许为空。
@div 表示是否仅仅是作为分组使用，并不对应于一个真实的对象
-->
<field x:schema="/nop/schema/xdef.xdef" xmlns:x="/nop/schema/xdsl.xdef"
       xmlns:xdef="/nop/schema/xdef.xdef"
       name="!prop-name" xdef:ref="record-simple-field.xdef"
       xdef:name="RecordFieldMeta" xdef:bean-package="io.nop.record.model"
       repeatKind="enum:io.nop.record.model.FieldRepeatKind"
       tagsCodec="string" tagIndex="!int=0" div="!boolean=false" asMap="!boolean=false"
>
    <sizeField xdef:ref="record-simple-field.xdef"/>

    <!--
    返回字段的循环次数
    -->
    <readRepeatExpr xdef:value="xpl-fn:(in,record,ctx)=>long"/>

    <!--
    返回字段循环的终止条件
    -->
    <readRepeatUntil xdef:value="xpl-fn:(in,record,ctx)=>boolean"/>

    <!--
    动态确定字段类型
    @onField 如果指定了onField，则输出时根据从record[onField]上获取到case类型，然后再映射到type类型，从根对象的types集合中再获取具体定义
    -->
    <switch xdef:name="RecordFieldSwitch" onField="string">
        <!--
        类型判断表达式
        -->
        <on xdef:value="xpl-fn:(record,ctx)=>string"/>

        <!--
        @when 与on表达式的返回值比较，如果相等，则实际类型为type指定的值
        -->
        <case when="!string" type="!string" xdef:name="RecordFieldSwitchCase" xdef:unique-attr="when"/>

        <default xdef:value="string"/>
    </switch>

    <fields xdef:body-type="list" xdef:key-attr="name">
        <field name="!prop-name" xdef:ref="RecordFieldMeta"/>
    </fields>

    <afterWrite xdef:value="xpl-fn:(out,record,ctx)=>any"/>

    <!-- 在所有子字段都读取到之后执行 -->
    <afterRead xdef:value="xpl-fn:(in,record,ctx)=>any"/>

    <!-- 文本输出时使用template更加直观  -->
    <template xdef:value="string"/>
</field>