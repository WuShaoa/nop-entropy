<?xml version="1.0" encoding="UTF-8" ?>

<lib x:schema="/nop/schema/xlib.xdef"
     xmlns:x="/nop/schema/xdsl.xdef" xmlns:xdsl="xdsl" xmlns:xpl="xpl" xmlns:c="c" xmlns:ui="ui">

    <tags>
        <DefaultMetaGenExtends outputMode="node">
            <attr name="_dsl_root" implicit="true"/>
            <source>
                <meta>
                    <xdsl:config xpl:ignoreTag="true">
                        <c:import from="/nop/core/xlib/filter.xlib"/>
                    </xdsl:config>
                </meta>
            </source>
        </DefaultMetaGenExtends>

        <DefaultMetaPostExtends outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <thisLib:GenDictLabelFields/>
                <thisLib:GenConnectionFields/>
                <thisLib:GenCodeRuleAutoExpr/>
                <thisLib:GenMaskingExpr/>
                <thisLib:GenFilterOp/>
            </source>
        </DefaultMetaPostExtends>


        <GenDictLabelFields outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <meta>
                    <props>
                        <c:for var="prop" items="${_dsl_root.childByTag('props').children}">
                            <c:script><![CDATA[
                        let name = prop.attrText('name');
                        if(name.endsWith("_label"))
                            continue;

                        let dict = prop.childAttr('schema','dict');
                        if(!dict)
                            continue;
                    ]]></c:script>

                            <prop name="${name}" graphql:labelProp="${name}_label"
                                  xpl:if="!prop.hasAttr('graphql:labelProp')">
                            </prop>

                            <prop name="${name}_label" displayName="${prop.getAttr('displayName')}" internal="true"
                                  graphql:dictName="${dict}" graphql:dictValueProp="${name}">
                                <schema type="String"/>
                            </prop>
                        </c:for>
                    </props>
                </meta>
            </source>
        </GenDictLabelFields>

        <GenConnectionFields outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <meta>
                    <props>

                        <c:for var="prop" items="${_dsl_root.childByTag('props').children}">
                            <c:script><![CDATA[
                        if(!prop.attrCsvSet('tagSet')?.contains('connection'))
                            continue;

                        let kind = prop.getAttr('ext:kind');
                        if(kind != 'to-many')
                            continue;

                        let name = prop.getAttr('name');
                    ]]></c:script>

                            <prop name="${name}"/>

                            <prop name="${name}Connection" displayName="${prop.getAttr('displayName')}" lazy="true"
                                  internal="true" graphql:connectionProp="${name}" graphql:queryMethod="findConnection">
                                <schema bizObjName="${prop.childByTag('schema').childAttr('item','bizObjName')}"/>
                            </prop>
                        </c:for>
                    </props>
                </meta>
            </source>
        </GenConnectionFields>

        <GenCodeRuleAutoExpr outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <meta>
                    <props>
                        <c:for var="prop" items="${_dsl_root.childByTag('props').children}">
                            <c:script><![CDATA[
                        if(!prop.getAttr('biz:codeRule'))
                            continue;

                        if(prop.childByTag('autoExpr'))
                            continue;
                    ]]></c:script>

                            <prop name="${prop.getAttr('name')}">
                                <autoExpr when="save">
                                    <c:print>
                                        <meta-gen:CreateWithCodeRule xpl:lib="/nop/core/xlib/meta-gen.xlib"/>
                                    </c:print>
                                </autoExpr>
                            </prop>
                        </c:for>
                    </props>
                </meta>
            </source>
        </GenCodeRuleAutoExpr>

        <CreateWithCodeRule>
            <attr name="propMeta" implicit="true"/>

            <source>
                const codeRuleGenerator = inject('nopCodeRuleGenerator')
                return codeRuleGenerator.generate(propMeta['biz:codeRule'],$scope);
            </source>
        </CreateWithCodeRule>

        <GenMaskingExpr outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <meta>
                    <props>
                        <c:for var="prop" items="${_dsl_root.childByTag('props').children}">
                            <c:script><![CDATA[
                        if(!prop.getAttr('ui:maskPattern'))
                            continue;
                    ]]></c:script>

                            <prop name="${prop.getAttr('name')}">
                                <transformOut>
                                    value?.toString()?.$maskPattern("${prop.getAttr('ui:maskPattern')}")
                                </transformOut>
                            </prop>
                        </c:for>
                    </props>
                </meta>
            </source>
        </GenMaskingExpr>

        <GenFilterOp outputMode="node">
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <meta>
                    <props>
                        <c:for var="prop" items="${_dsl_root.childByTag('props').children}">
                            <prop name="${prop.getAttr('name')}" xpl:if="prop.attrCsvSet('tagSet')?.contains('like')"
                                  ui:filterOp="contains" allowFilterOp="${'contains'.$mergeTagSet(prop.getAttr('allowFilterOp'))}">
                            </prop>
                        </c:for>
                    </props>
                </meta>
            </source>
        </GenFilterOp>
    </tags>
</lib>